// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"



struct VeertIn //vertex input
{
    float3 positionOS : POSITION;
    float3 normalOS : NORMAL;
    float4 tangentOS : TANGENT;
    float2 uv : TEXCOORD0;
    /*#ifdef LIGHTMAP_ON
        float2 lightmapUV : TEXCOORD1;
    #endif
    #ifdef REQUIRES_VERTEX_COLORS
        float4 color : COLOR;
    #endif*/
    //UNITY_VERTEX_INPUT_INSTANCE_ID
};

struct TessellationFactors 
{
    float edge[3] : SV_TessFactor;
    float inside : SV_InsideTessFactor;
    /*#if NUM_BEZIER_CONTROL_POINTS > 0
        float3 bezierPoints[NUM_BEZIER_CONTROL_POINTS] : BEZIERPOS;
    #endif*/
};

struct TessellationControlPoint 
{
    float3 positionWS : INTERNALTESSPOS;
    float4 positionCS : SV_POSITION;
    float3 normalWS : NORMAL;
    //float4 tangentWS : TANGENT;
    float2 uv : TEXCOORD0;
    /*#ifdef LIGHTMAP_ON
        float2 lightmapUV : TEXCOORD1;
    #endif
    #ifdef REQUIRES_VERTEX_COLORS
        float4 color : COLOR;
    #endif
    UNITY_VERTEX_INPUT_INSTANCE_ID*/
};

struct Interpolators //Output
{
    float2 uv                       : TEXCOORD0;
    float3 normalWS                 : TEXCOORD1;
    float3 positionWS               : TEXCOORD2;
    //float4 positionCS: TEXCOORD5;
    //float4 tangentWS                : TEXCOORD3;
};
// We have to insert three draw vertices at once so the triangle stays connected
// in the graphics shader. This structure facilitates that, and helps us
// save some memory by sharing some data
struct DrawTriangle {
    //float height; // clipping height
    Interpolators vertices[3];
};
// The output triangle buffer, passed to the graphics shader
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;
AppendStructuredBuffer<Interpolators> _DrawTessellation;


// This describes a vertex on the source mesh
struct SourceVertex {
    float3 positionOS; // position in object space
    float3 normalOS; // normal in object space
    float2 uv; // UV
};


// Source buffers, arranged as a vertex buffer and index buffer
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;

// Other variables
int _NumSourceTriangles;
float4x4 _LocalToWorld;

float _TessellationFactor;
float _TessellationBias;
float _TessellationSmoothing;
float _FrustumCullTolerance;
float _BackFaceCullTolerance;


TessellationControlPoint Vertex(VeertIn input) 
{
    TessellationControlPoint output;

    UNITY_SETUP_INSTANCE_ID(input);
    UNITY_TRANSFER_INSTANCE_ID(input, output);

    VertexPositionInputs posnInputs = GetVertexPositionInputs(input.positionOS);
    VertexNormalInputs normalInputs = GetVertexNormalInputs(input.normalOS, input.tangentOS);

    output.positionWS = posnInputs.positionWS;
    output.positionCS = posnInputs.positionCS;
    output.normalWS = normalInputs.normalWS;
    output.uv = /*TRANSFORM_TEX(*/input.uv/*, _MainTexture)*/; // Apply texture tiling and offset

    return output;
}

// Returns true if the point is outside the bounds set by lower and higher
bool IsOutOfBounds(float3 p, float3 lower, float3 higher) 
{
    return p.x < lower.x || p.x > higher.x || p.y < lower.y || p.y > higher.y || p.z < lower.z || p.z > higher.z;
}

// Returns true if the given vertex is outside the camera fustum and should be culled
bool IsPointOutOfFrustum(float4 positionCS, float tolerance) 
{
    float3 culling = positionCS.xyz;
    float w = positionCS.w;
    // UNITY_RAW_FAR_CLIP_VALUE is either 0 or 1, depending on graphics API
    // Most use 0, however OpenGL uses 1
    float3 lowerBounds = float3(-w - tolerance, -w - tolerance, -w * UNITY_RAW_FAR_CLIP_VALUE - tolerance);
    float3 higherBounds = float3(w + tolerance, w + tolerance, w + tolerance);
    return IsOutOfBounds(culling, lowerBounds, higherBounds);
}

// Returns true if the points in this triangle are wound counter-clockwise
bool ShouldBackFaceCull(float4 p0PositionCS, float4 p1PositionCS, float4 p2PositionCS, float tolerance) 
{
    float3 point0 = p0PositionCS.xyz / p0PositionCS.w;
    float3 point1 = p1PositionCS.xyz / p1PositionCS.w;
    float3 point2 = p2PositionCS.xyz / p2PositionCS.w;
    // In clip space, the view direction is float3(0, 0, 1), so we can just test the z coord
    #if UNITY_REVERSED_Z
        return cross(point1 - point0, point2 - point0).z < -tolerance;
    #else // In OpenGL, the test is reversed
        return cross(point1 - point0, point2 - point0).z > tolerance;
    #endif
}

// Returns true if it should be clipped due to frustum or winding culling
bool ShouldClipPatch(float4 p0PositionCS, float4 p1PositionCS, float4 p2PositionCS, float frustumTolerance, float windingTolerance) 
{
    bool allOutside = IsPointOutOfFrustum(p0PositionCS, frustumTolerance) &&
        IsPointOutOfFrustum(p1PositionCS, frustumTolerance) &&
        IsPointOutOfFrustum(p2PositionCS, frustumTolerance);
    return allOutside || ShouldBackFaceCull(p0PositionCS, p1PositionCS, p2PositionCS, windingTolerance);
}

// Calculate the tessellation factor for an edge
// This function needs the world and clip space positions of the connected vertices
float EdgeTessellationFactor(float scale, float bias, float multiplier, float3 p0PositionWS, float4 p0PositionCS, float3 p1PositionWS, float4 p1PositionCS) 
{
    //float factor = 1;
    float factor = scale;
    /*#if defined(_TESSELLATION_FACTOR_CONSTANT)
        factor = scale;
    #elif defined(_TESSELLATION_FACTOR_WORLD)
        factor = distance(p0PositionWS, p1PositionWS) / scale;
    #elif defined(_TESSELLATION_FACTOR_WORLD_WITH_DEPTH)
        float length = distance(p0PositionWS, p1PositionWS);
        float distanceToCamera = distance(GetCameraPositionWS(), (p0PositionWS + p1PositionWS) * 0.5);
        factor = length / (scale * distanceToCamera * distanceToCamera);
    #elif defined(_TESSELLATION_FACTOR_SCREEN)
        factor = distance(p0PositionCS.xyz / p0PositionCS.w, p1PositionCS.xyz / p1PositionCS.w) * _ScreenParams.y / scale;
    #endif*/
    //float ffff = ceil((GetDistanceToCamera(p0PositionWS) - _FirstStepDistance) / (_DetailStepDistance));
    //factor = factor * rcp(GetDistanceToCamera(p0PositionWS), _FirstStepDistance);
    /*[branch] if((GetDistanceToCamera(p0PositionWS) - _FirstStepDistance) > 0)
    {
        factor = factor * rcp(ffff);
    }*/
    return max(1.0f, (factor + bias) * multiplier);
}

// The patch constant function runs once per triangle, or "patch"
// It runs in parallel to the hull function
TessellationFactors PatchConstantFunction(
    InputPatch<TessellationControlPoint, 3> patch) 
{
    //UNITY_SETUP_INSTANCE_ID(patch[0]); // Set up instancing
    TessellationFactors f = (TessellationFactors)0;
    // Check if this patch should be culled (it is out of view)
    if (ShouldClipPatch(patch[0].positionCS, patch[1].positionCS, patch[2].positionCS, _FrustumCullTolerance, _BackFaceCullTolerance)) 
    {
        f.edge[0] = f.edge[1] = f.edge[2] = f.inside = 0; // Cull the patch
    } 
    else 
    {
        // Calculate tessellation factor multipliers, per vertex
        float3 multipliers;
        #ifdef _TESSELLATION_FACTOR_VCOLORS
            // If applying vertex colors, get each vertice's green channel
            [unroll] for (int i = 0; i < 3; i++) 
            {
                multipliers[i] = patch[i].color.g;
            }
        #else
        multipliers = 1; // Each vertex has the same multipler
        #endif
            // Calculate tessellation factors
            f.edge[0] = EdgeTessellationFactor(_TessellationFactor, _TessellationBias, (multipliers[1] + multipliers[2]) / 2, patch[1].positionWS, patch[1].positionCS, patch[2].positionWS, patch[2].positionCS);
            f.edge[1] = EdgeTessellationFactor(_TessellationFactor, _TessellationBias, (multipliers[2] + multipliers[0]) / 2, patch[2].positionWS, patch[2].positionCS, patch[0].positionWS, patch[0].positionCS);
            f.edge[2] = EdgeTessellationFactor(_TessellationFactor, _TessellationBias, (multipliers[0] + multipliers[1]) / 2, patch[0].positionWS, patch[0].positionCS, patch[1].positionWS, patch[1].positionCS);
            f.inside = (f.edge[0] + f.edge[1] + f.edge[2]) / 3.0;
            
            // Calculate smoothing bezier control points
        #if defined(_TESSELLATION_SMOOTHING_BEZIER_LINEAR_NORMALS)
            CalculateBezierControlPoints(f.bezierPoints, patch[0].positionWS, patch[0].normalWS, patch[1].positionWS, patch[1].normalWS, patch[2].positionWS, patch[2].normalWS);
        #elif defined(_TESSELLATION_SMOOTHING_BEZIER_QUAD_NORMALS)
            CalculateBezierControlPoints(f.bezierPoints, patch[0].positionWS, patch[0].normalWS, patch[1].positionWS, patch[1].normalWS, patch[2].positionWS, patch[2].normalWS);
            CalculateBezierNormalPoints(f.bezierPoints, patch[0].positionWS, patch[0].normalWS, patch[1].positionWS, patch[1].normalWS, patch[2].positionWS, patch[2].normalWS);
        #endif
    }
    return f;
}

// The hull function runs once per vertex. You can use it to modify vertex
// data based on values in the entire triangle
[domain("tri")] // Signal we're inputting triangles
[outputcontrolpoints(3)] // Triangles have three points
[outputtopology("triangle_cw")] // Signal we're outputting triangles
[patchconstantfunc("PatchConstantFunction")] // Register the patch constant function
// Select a partitioning mode based on keywords
#if defined(_PARTITIONING_INTEGER)
    [partitioning("integer")]
#elif defined(_PARTITIONING_FRAC_EVEN)
    [partitioning("fractional_even")]
#elif defined(_PARTITIONING_FRAC_ODD)
    [partitioning("fractional_odd")]
#elif defined(_PARTITIONING_POW2)
    [partitioning("pow2")]
#else 
    [partitioning("fractional_odd")]
#endif
TessellationControlPoint Hull(
    InputPatch<TessellationControlPoint, 3> patch, // Input triangle
    uint id : SV_OutputControlPointID) 
{ // Vertex index on the triangle

    return patch[id];
}

// Barycentric interpolation as a function
float3 BarycentricInterpolate(float3 bary, float3 a, float3 b, float3 c) 
{
    return bary.x * a + bary.y * b + bary.z * c;
}

// Call this macro to interpolate between a triangle patch, passing the field name
#define BARYCENTRIC_INTERPOLATE(fieldName) \
        patch[0].fieldName * barycentricCoordinates.x + \
        patch[1].fieldName * barycentricCoordinates.y + \
        patch[2].fieldName * barycentricCoordinates.z

// Calculate Phong projection offset
float3 PhongProjectedPosition(float3 flatPositionWS, float3 cornerPositionWS, float3 normalWS) 
{
    return flatPositionWS - dot(flatPositionWS - cornerPositionWS, normalWS) * normalWS;
}

// Apply Phong smoothing
float3 CalculatePhongPosition(float3 bary, float smoothing, float3 p0PositionWS, float3 p0NormalWS,
    float3 p1PositionWS, float3 p1NormalWS, float3 p2PositionWS, float3 p2NormalWS) 
{
    float3 flatPositionWS = BarycentricInterpolate(bary, p0PositionWS, p1PositionWS, p2PositionWS);
    float3 smoothedPositionWS =
        bary.x * PhongProjectedPosition(flatPositionWS, p0PositionWS, p0NormalWS) +
        bary.y * PhongProjectedPosition(flatPositionWS, p1PositionWS, p1NormalWS) +
        bary.z * PhongProjectedPosition(flatPositionWS, p2PositionWS, p2NormalWS);
    return lerp(flatPositionWS, smoothedPositionWS, smoothing);
}

// The domain function runs once per vertex in the final, tessellated mesh
// Use it to reposition vertices and prepare for the fragment stage
[domain("tri")] // Signal we're inputting triangles
Interpolators Domain(
    TessellationFactors factors, // The output of the patch constant function
    OutputPatch<TessellationControlPoint, 3> patch, // The Input triangle
    float3 barycentricCoordinates : SV_DomainLocation) 
{ // The barycentric coordinates of the vertex on the triangle

    Interpolators output;

    // Setup instancing and stereo support (for VR)
    UNITY_SETUP_INSTANCE_ID(patch[0]);
    UNITY_TRANSFER_INSTANCE_ID(patch[0], output);
    UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);

    // Calculate tessellation smoothing multipler
    float smoothing = _TessellationSmoothing;
    #ifdef _TESSELLATION_SMOOTHING_VCOLORS
        smoothing *= BARYCENTRIC_INTERPOLATE(color.r); // Multiply by the vertex's red channel
    #endif

    // Calculate smoothed position, normal, and tangent
    // This rounds a triangle to smooth model silhouettes and improve normal interpolation
    // It can use either flat (no smoothing), Phong, or bezier-based smoothing, depending on material settings
    #if defined(_TESSELLATION_SMOOTHING_PHONG)
        float3 positionWS = CalculatePhongPosition(barycentricCoordinates, smoothing, patch[0].positionWS, patch[0].normalWS, patch[1].positionWS, patch[1].normalWS, patch[2].positionWS, patch[2].normalWS);
    #elif defined(_TESSELLATION_SMOOTHING_BEZIER_LINEAR_NORMALS) || defined(_TESSELLATION_SMOOTHING_BEZIER_QUAD_NORMALS)
        float3 positionWS = CalculateBezierPosition(barycentricCoordinates, smoothing, factors.bezierPoints, patch[0].positionWS, patch[1].positionWS, patch[2].positionWS);
    #else
        float3 positionWS = BARYCENTRIC_INTERPOLATE(positionWS);
    #endif
    
    #if defined(_TESSELLATION_SMOOTHING_BEZIER_QUAD_NORMALS)
        float3 normalWS, tangentWS;
        CalculateBezierNormalAndTangent(barycentricCoordinates, smoothing, factors.bezierPoints,
            patch[0].normalWS, patch[0].tangentWS.xyz, patch[1].normalWS, patch[1].tangentWS.xyz, patch[2].normalWS, patch[2].tangentWS.xyz,
            normalWS, tangentWS);
    #else
        float3 normalWS = BARYCENTRIC_INTERPOLATE(normalWS);
        //float3 tangentWS = BARYCENTRIC_INTERPOLATE(tangentWS.xyz);
    #endif

    float2 uv = BARYCENTRIC_INTERPOLATE(uv); // Interpolate UV
    // Sample the height map and offset position along the normal vector accordingly
    //float height = SAMPLE_TEXTURE2D_LOD(_HeightMap, sampler_HeightMap, uv, 0).r * _HeightMapAltitude;
    //positionWS += normalWS * height;

    output.uv = uv;
    //output.positionCS = TransformWorldToHClip(positionWS);
    output.normalWS = normalWS;
    output.positionWS = positionWS;
    //output.tangentWS = float4(tangentWS, patch[0].tangentWS.w);
    
    /*#ifdef LIGHTMAP_ON
        output.lightmapUV = BARYCENTRIC_INTERPOLATE(lightmapUV);
    #else
        OUTPUT_SH(output.normalWS, output.vertexSH);
    #endif
    float fogFactor = ComputeFogFactor(output.positionCS.z);
    float3 vertexLight = VertexLighting(output.positionWS, output.normalWS);
    output.fogFactorAndVertexLight = float4(fogFactor, vertexLight);*/

    return output;
}

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    // Return if every triangle has been processed
    if ((int)id.x >= _NumSourceTriangles) 
    {
        return;
    }

    int triStart = id.x;
    //Interpolators inputs[3];
    Interpolators inputs = (Interpolators)0;
    DrawTriangle tri = (DrawTriangle)0;

    /*[unroll] for (int p = 0; p < 3; p++) 
    {
        //tri.vertices[p] = ExtrudeVertex(inputs[p], posHeight);
        _SourceVertices[_SourceTriangles[triStart + i]];
    }*/

    SourceVertex source = _SourceVertices[_SourceTriangles[id.x]];
    VeertIn vin;
    vin.positionOS = source.positionOS;
    vin.normalOS = source.normalOS;
    vin.uv = source.uv;
    vin.tangentOS = float4(0,0,1,1);

    TessellationControlPoint tessContPoint = Vertex(vin);
    //TessellationFactors tessFactors = PatchConstantFunction(tessContPoint);
    #pragma hull Hull
    #pragma domain Domain

    //_DrawTriangles.Append(tri);
    _DrawTessellation.Append(inputs);

    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
